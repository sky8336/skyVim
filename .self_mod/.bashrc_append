
#
# add for ctags and terminal(by maning)
#

alias cindex='ctags -I __THROW -I __THROWNL -I __nonnull -R --c-kinds=+p --fields=+iaS --extra=+q'

#获取 Git 分支名称，在 .git 目录下面有个 HEAD 文件，包含当前分支的路径信息：
#ref: refs/heads/BRANCH-NAME

#(1)读取这个文件，再和对应的路径互相匹配一下获得正确地分支名称。

## Parses out the branch name from .git/HEAD:
find_git_branch () {
	local dir=. head
	until [ "$dir" -ef / ]; do
		if [ -f "$dir/.git/HEAD" ]; then
			head=$(< "$dir/.git/HEAD")
			if [[ $head = ref:\ refs/heads/* ]]; then
				git_branch="[${head#*/*/}]"
			elif [[ $head != '' ]]; then
				git_branch="[detached]"
			else
				git_branch="[unknow]"
			fi
			return
		fi
		dir="../$dir"
	done
	git_branch=''
}

#(2)将这个函数加入到 PROMPT_COMMAND 中，保证 Bash 在创建 prompt 之前调用这个函数取得分支名称：

PROMPT_COMMAND="find_git_branch; $PROMPT_COMMAND"

#(3)重新定义 PS1 变量：

# Here is bash color codes you can use
black=$'\[\e[1;30m\]'
red=$'\[\e[1;31m\]'
green=$'\[\e[1;32m\]'
yellow=$'\[\e[1;33m\]'
dark_yellow=$'\[\033[0;33m\]'
blue=$'\[\e[1;34m\]'
magenta=$'\[\e[1;35m\]'
cyan=$'\[\e[1;36m\]'
white=$'\[\e[1;37m\]'
normal=$'\[\e[m\]'

# ANSI color codes
RS="\[\033[0m\]"    # reset
HC="\[\033[1m\]"    # hicolor
UL="\[\033[4m\]"    # underline
INV="\[\033[7m\]"   # inverse background and foreground

FBLK="\[\033[30m\]" # foreground black
FRED="\[\033[31m\]" # foreground red
FGRN="\[\033[32m\]" # foreground green
FYEL="\[\033[33m\]" # foreground yellow
FBLE="\[\033[34m\]" # foreground blue
FMAG="\[\033[35m\]" # foreground magenta
FCYN="\[\033[36m\]" # foreground cyan
FWHT="\[\033[37m\]" # foreground white

BBLK="\[\033[40m\]" # background black
BRED="\[\033[41m\]" # background red
BGRN="\[\033[42m\]" # background green
BYEL="\[\033[43m\]" # background yellow
BBLE="\[\033[44m\]" # background blue
BMAG="\[\033[45m\]" # background magenta
BCYN="\[\033[46m\]" # background cyan
BWHT="\[\033[47m\]" # background white

#无Git分支信息，单行
#PS1='${debian_chroot:+($debian_chroot)}\[\033[01;35m\]\u@\h\[\033[0;31m\]:\[\033[01;35m\]\w\[\033[00m\]\[\033[0;33m\]$\[\033[0;36m\] '

#单行
#PS1="$white[$magenta\u$white@$green\h$white:$cyan\w$yellow\$git_branch$white]\$ $normal"

#两行，显示git分支信息和时间
#PS1="$magenta┌─[$magenta\u@\h$red:$magenta(\t)$dark_yellow\$git_branch\n$magenta└─>$magenta\w$yellow\$ $normal"

#一行，显示git分支信息
#PS1="$magenta\u@\h$red:$magenta\w$dark_yellow\$git_branch$dark_yellow\$ $normal"
#PS1="$magenta\u$cyan@\h$red:$magenta\w$dark_yellow\$git_branch$red\$ $normal"
PS1="$FCYN\u$cyan@\h$RS$red:$RS$FCYN\w$dark_yellow\$git_branch$red\$ $normal"
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

#add some alias
alias vih='vi ~/.vim/my_help/'
alias vidc='vi ~/.vim/my_help/debug_cmd.txt'
alias vigc='vi ~/.vim/my_help/git_command.txt'
alias vigp='vi ~/.vim/my_help/git_push.txt'
alias vilc='vi ~/.vim/my_help/linux_command.txt'
alias vivc='vi ~/.vim/my_help/vim_command.txt'
alias vi='vim'
alias tagsc='rm cscope.*.out cscope.out cscope.files tags'
alias exchkey=$HOME/.vim/my_help/locktoesc.sh
alias mgrep='grep --exclude={cscope*,tags*}'
alias week='date +%V.%u'
alias gl='git log --graph --decorate --pretty=oneline --abbrev-commit --all'
alias gls='git log --graph --decorate --pretty=short --abbrev-commit --all'
alias glm='git log --graph --decorate --pretty=medium --abbrev-commit --all'
alias glf='git log --graph --decorate --pretty=full --abbrev-commit --all'
alias glfr='git log --graph --decorate --pretty=fuller --abbrev-commit --all'
alias gle='git log --graph --decorate --pretty=email --abbrev-commit --all'
alias gh='echo "gl, gls, glm, glf, glfr, gle"'
#git lg #already used
alias hs='python -m SimpleHTTPServer 8001 &'
alias mhs='python ~/.vim/tools/MTHTTPServerWFM.py &'

# git commit -a 提交代码时，编辑器默认为vim的另一种方法
#export EDITOR=/usr/bin/vim
